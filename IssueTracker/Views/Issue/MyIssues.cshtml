@model MyIssuesViewModel

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "My Issues";
}
<div id="created-issues-container">
</div>

<div id="assigned-issues-container">
</div>

@section scripts {
    <script>
const componentContainers = {
    issueLists: {
        default: "#default-issues-container",
        created: "#created-issues-container",
        assigned: "#assigned-issues-container",
        assigned_only: "#assigned-only-issues-container"
    }
}

let components = {
    issueLists: {
        created: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "created",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                userId: '@Model.UserId'
            },
            success: function(result) {
                $(componentContainers.issueLists.created).html(result);
            }
        },
        assigned: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "assigned",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                userId: '@Model.UserId'
            },
            success: function(result) {
                $(componentContainers.issueLists.assigned).html(result);
            }
        },
        assigned_only: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "assigned_only",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                userId: '@Model.UserId'
            },
            success: function(result) {
                $(componentContainers.issueLists.assigned_only).html(result);
            }
        }
    }
}

function sortIssueList(listType, sortOrder) {
    if (sortOrder == components.issueLists[listType].data.sortOrder) {
        sortOrder += "_DESC";
    }
    components.issueLists[listType].data.sortOrder = sortOrder;
    $.ajax(components.issueLists[listType]);
}

function searchIssueList(listType) {
    components.issueLists[listType].data.searchString = $(componentContainers.issueLists[listType]).find('.search-input').val();
    $.ajax(components.issueLists[listType]);
}

function selectPage(listType, pageIndex) {
    components.issueLists[listType].data.pageIndex = pageIndex;
    $.ajax(components.issueLists[listType]);
}

function filterStatus(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-status :selected').text();
    if (selectedFilter == 'Status') {
        components.issueLists[listType].data.statusFilter = '';
    }
    else {
        components.issueLists[listType].data.statusFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

function filterPriority(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-priority :selected').text();
    if (selectedFilter == 'Priority') {
        components.issueLists[listType].data.priorityFilter = '';
    }
    else {
        components.issueLists[listType].data.priorityFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

function filterType(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-type :selected').text();
    if (selectedFilter == 'Type') {
        components.issueLists[listType].data.typeFilter = '';
    }
    else {
        components.issueLists[listType].data.typeFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

$(document).ready(function() {
    $.ajax(components.issueLists.created);
    $.ajax(components.issueLists.assigned);
})
    </script>
}
