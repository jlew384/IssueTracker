@using System.Security.Claims;
@model IssueListViewModel

@{
    string userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
    var ownerClaimValues = User.Claims
         .Where(c => c.Type == UserClaimTypes.PROJECT_OWNER)
         .Select(c => Int32.Parse(c.Value))
         .ToList();

    var statusList = IssueStatus.List;
    statusList.Insert(0, "Status");

    var priorityList = IssuePriority.List;
    priorityList.Insert(0, "Priority");

    var typeList = IssueType.List;
    typeList.Insert(0, "Type");
}

<div class="card shadow">
    <div class="card-header d-flex flex-row justify-content-between align-content-center">
        @switch(Model.Type)
        {
            case IssueListViewComponent.Type.CREATED:
                <div class="fs-2">            
                    Created Issues
                </div>
                break;
            case IssueListViewComponent.Type.ASSIGNED:
            case IssueListViewComponent.Type.ASSIGNED_ONLY:
                <div class="fs-2">            
                    Assigned Issues
                </div>
                break;
            default:
                <div class="fs-2">            
                    Issues
                </div>
                break;
        }
        
        <div class="w-50 d-flex">
            <div class="d-flex" >
                <select class="btn-secondary m-1 filter-status" onchange="filterStatus('@Model.Type')" style="border-radius: 4px">
                    @foreach(var status in statusList)
                    {
                        if(Model.StatusFilter == status)
                        {
                            <option selected value="@status">@status</option>
                        }
                        else
                        {
                            <option value="@status">@status</option>
                        }
                        
                    }
                </select>
                <select class="btn-secondary m-1 filter-priority" onchange="filterPriority('@Model.Type')" style="border-radius: 4px">
                    @foreach(var priority in priorityList)
                    {
                        if(Model.PriorityFilter == priority)
                        {
                            <option selected value="@priority">@priority</option>
                        }
                        else
                        {
                            <option value="@priority">@priority</option>
                        }
                        
                    }
                </select>
                <select class="btn-secondary m-1 filter-type" onchange="filterType('@Model.Type')" style="border-radius: 4px">
                    @foreach(var type in typeList)
                    {
                        if(Model.TypeFilter == type)
                        {
                            <option selected value="@type">@type</option>
                        }
                        else
                        {
                            <option value="@type">@type</option>
                        }
                        
                    }
                </select>
            </div>
            <div class="input-group m-1"> 
                <input class="form-control search-input" type="text" placeholder="Search by title" value="@Model.SearchString"/>
                <span onclick="searchIssueList('@Model.Type')" role="button" class="input-group-text pointer-event"><i class="bi bi-search search-btn"></i></span>
            </div>
            
        </div>
    </div>
    <div class="">
        <table class="table table-hover table-resposive">
            <thead>
                <tr class="bg-secondary text-white">
                    <th role="button" class="border" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.TITLE')">
                        @Html.DisplayNameFor(model => model.Issue.Title)
                    </th>
                    <th role="button" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.STATUS')" class="border">
                        @Html.DisplayNameFor(model => model.Issue.Status)
                    </th>
                    <th role="button" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.PRIORITY')" class="border">
                        @Html.DisplayNameFor(model => model.Issue.Priority)
                    </th>
                    <th role="button" class="border" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.TYPE')">
                        @Html.DisplayNameFor(model => model.Issue.Type)
                    </th>
                    <th role="button" class="border" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.ASSIGNED_USER_NAME')">
                        @Html.DisplayNameFor(model => model.Issue.AssignedUser)
                    </th>
                    <th role="button" class="border" onclick="sortIssueList('@Model.Type', '@IssueSortOrder.CREATED_DATE')">
                        @Html.DisplayNameFor(model => model.Issue.Created)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var issue in Model.Issues)
                {
                    <tr onclick="location.href = '@Url.Action("Details", "Issue", new { id = issue.Id })'">
                        <td>
                            @Html.DisplayFor(issueItem => issue.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(issueItem => issue.Status)
                        </td>
                        <td>
                            @Html.DisplayFor(issueItem => issue.Priority)
                        </td>
                        <td>
                            @Html.DisplayFor(issueItem => issue.Type)
                        </td>
                        <td>
                            @Html.DisplayFor(issueItem => issue.AssignedUser.UserName)
                        </td>
                        <td>
                            @Html.DisplayFor(issueItem => issue.Created)
                        </td>
                        <td>
                            
                            @if(User.IsInRole(UserRoles.ADMIN) || userId == issue.CreatorUserId || User.IsInRole(UserRoles.PROJ_MNGR) && ownerClaimValues.Contains(issue.ProjectId))
                            {
                                <span>
                                    <a class="m-1 text-muted" asp-controller="Issue" asp-action="Edit" asp-route-id="@issue.Id" asp-route-pid="@issue.ProjectId"><i class="bi bi-pencil-fill"></i></a>
                                    <a class="m-1 text-muted" asp-controller="Issue" asp-action="Delete" asp-route-id="@issue.Id" asp-route-pid="@issue.ProjectId"><i class="bi bi-trash2-fill"></i></a>
                                </span>
                    
                            }  
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer d-flex flex-row justify-content-between">
        <div>
            @if(Model.ProjectId != null && Model.ProjectId != 0)
            {
                <a class="btn btn-primary" asp-controller="Issue" asp-action="Create" asp-route-pid="@Model.ProjectId"><i class="bi bi-plus"></i> Create Issue</a>
            }
        </div>
        
        <div class="btn-group" role="group">
            @if(Model.Issues.TotalPages > 1)
            {
                if(Model.Issues.PageIndex > 3)
                {
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', 1)">First</button>
                }

                if(Model.Issues.PageIndex > 2)
                {
                    int pnum = Model.PageIndex - 2;
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', @pnum)">@pnum</button>
                }

                if(Model.Issues.PageIndex > 1)
                {
                    int pnum = Model.PageIndex - 1;
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', @pnum)">@pnum</button>
                }
                
                <button type="button" class="btn btn-secondary">@Model.Issues.PageIndex</button>

                if(Model.Issues.PageIndex < Model.Issues.TotalPages)
                {
                    int pnum = Model.PageIndex + 1;
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', @pnum)">@pnum</button>
                }

                if(Model.Issues.PageIndex < Model.Issues.TotalPages - 1)
                {
                    int pnum = Model.PageIndex + 2;
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', @pnum)">@pnum</button>
                }

                if(Model.Issues.PageIndex < Model.Issues.TotalPages - 2)
                {
                    <button type="button" class="btn btn-outline-secondary" onclick="selectPage('@Model.Type', @Model.Issues.TotalPages)">Last</button>
                }
            }
        </div>
        
    </div>
</div>

