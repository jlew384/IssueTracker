@model ProjectIssuesViewModel

@{
    ViewData["Title"] = "Project Details";
    var ownerClaimValues = User.Claims
         .Where(c => c.Type == UserClaimTypes.PROJECT_OWNER)
         .Select(c => Int32.Parse(c.Value))
         .ToList();
}
<div class="card m-2">
    <div class="card-header">
        <div class="d-flex flex-row justify-content-between align-content-center">
            <div class="fs-1">
                Project: @Html.DisplayFor(model => model.Project.Title)
            </div>     
            <div>
                @*<a class="text-muted h4 m-1" asp-action="Edit" asp-route-pid="@Model.Project.Id"><i class="bi bi-pencil-fill"></i></a>
                <a class="text-muted h4 m-1" asp-action="Delete" asp-route-pid="@Model.Project.Id" asp-route-refererUrl="@Model.RefererUrl"><i class="bi bi-trash2-fill"></i></a>*@
            </div>
        </div>
        
    </div>
    <div class="card-body d-flex">
        <div class="col-9">
            <h6>
            @Html.DisplayNameFor(model => model.Project.Desc)
            </h6>
            <p class="mb-5">
                @Html.DisplayFor(model => model.Project.Desc)
            </p>
        </div>
        <div class="col-3">
            <h6>
            @Html.DisplayNameFor(model => model.Project.DateCreated)
            </h6>
            <p>
                @Html.DisplayFor(model => model.Project.DateCreated)
            </p>
            <h6>
                @Html.DisplayNameFor(model => model.Project.DateModified)
            </h6>
            <p>
                @Html.DisplayFor(model => model.Project.DateModified)
            </p>
        </div>        
    </div>
    <div class="card-footer">
        @if(User.IsInRole(UserRoles.ADMIN) || (User.IsInRole(UserRoles.PROJ_MNGR) && ownerClaimValues.Contains(Model.Project.Id)))
        {
            <a asp-controller="Administration" asp-action="ManageUsersInProject" asp-route-pid="@Model.Project.Id" class="btn btn-primary">Manage Project Users</a>
        }
        else
        {
            @*<a class="btn btn-primary">View Project Users</a>*@
        }

    </div>
</div>

<div id="default-issues-container" class="m-2">
</div>

@section scripts {
    <script>
const componentContainers = {
    issueLists: {
        default: "#default-issues-container",
        created: "#created-issues-container",
        assigned: "#assigned-issues-container",
        assigned_only: "#assigned-only-issues-container"
    }
}

let components = {
    issueLists: {
        default: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "default",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                pid: @Model.Project.Id,
            },
            success: function(result) {
                $(componentContainers.issueLists.default).html(result);
            }
        },
        created: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "created",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                pid: @Model.Project.Id,
            },
            success: function(result) {
                $(componentContainers.issueLists.created).html(result);
            }
        },
        assigned: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "assigned",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                pid: @Model.Project.Id,
            },
            success: function(result) {
                $(componentContainers.issueLists.assigned).html(result);
            }
        },
        assigned_only: {
            type: 'GET',
            url: "@Url.Action("IssueList", "Issue")",
            data: {
                type: "assigned_only",
                sortOrder: "@IssueSortOrder.CREATED_DATE_DESC",
                searchString: "",
                pageIndex: 1,
                statusFilter: "",
                priorityFilter: "",
                typeFilter: "",
                pid: @Model.Project.Id,
            },
            success: function(result) {
                $(componentContainers.issueLists.assigned_only).html(result);
            }
        }
    }
}

function sortIssueList(listType, sortOrder) {
    if (sortOrder == components.issueLists[listType].data.sortOrder) {
        sortOrder += "_DESC";
    }
    components.issueLists[listType].data.sortOrder = sortOrder;
    $.ajax(components.issueLists[listType]);
}

function searchIssueList(listType) {
    components.issueLists[listType].data.searchString = $(componentContainers.issueLists[listType]).find('.search-input').val();
    $.ajax(components.issueLists[listType]);
}

function selectPage(listType, pageIndex) {
    components.issueLists[listType].data.pageIndex = pageIndex;
    $.ajax(components.issueLists[listType]);
}

function filterStatus(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-status :selected').text();
    if (selectedFilter == 'Status') {
        components.issueLists[listType].data.statusFilter = '';
    }
    else {
        components.issueLists[listType].data.statusFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

function filterPriority(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-priority :selected').text();
    if (selectedFilter == 'Priority') {
        components.issueLists[listType].data.priorityFilter = '';
    }
    else {
        components.issueLists[listType].data.priorityFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

function filterType(listType) {
    var selectedFilter = $(componentContainers.issueLists[listType]).find('.filter-type :selected').text();
    if (selectedFilter == 'Type') {
        components.issueLists[listType].data.typeFilter = '';
    }
    else {
        components.issueLists[listType].data.typeFilter = selectedFilter;
    }
    $.ajax(components.issueLists[listType]);
}

$(document).ready(function() {
    $.ajax(components.issueLists.default);
})
    </script>
}




